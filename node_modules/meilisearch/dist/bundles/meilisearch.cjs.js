'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var instance = _interopDefault(require('axios'));

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var MeiliSearchTimeOutError = /** @class */ (function (_super) {
    __extends(MeiliSearchTimeOutError, _super);
    function MeiliSearchTimeOutError(message) {
        var _this = _super.call(this, message) || this;
        _this.name = 'MeiliSearchTimeOutError';
        _this.type = _this.constructor.name;
        Error.captureStackTrace(_this, MeiliSearchTimeOutError);
        return _this;
    }
    return MeiliSearchTimeOutError;
}(Error));

var MeiliSearchApiError = /** @class */ (function (_super) {
    __extends(class_1, _super);
    function class_1(error, cachedStack) {
        var _a;
        var _this = _super.call(this, error.message) || this;
        _this.type = _this.constructor.name;
        _this.name = 'MeiliSearchApiError';
        // Fetch the native error message but add our application name in front of it.
        // This means slicing the "Error" string at the start of the message.
        if (error.response !== undefined) {
            _this.response = {
                status: error.response.status,
                statusText: error.response.statusText,
                path: error.response.config.url,
                method: error.response.config.method,
                body: error.response.data,
            };
            // If a custom message was sent back by our API
            // We change the error message to be more explicit
            if (((_a = error.response.data) === null || _a === void 0 ? void 0 : _a.message) !== undefined) {
                _this.message = error.response.data.message;
            }
        }
        else {
            // If MeiliSearch did not answered
            _this.request = {
                url: error.request._currentUrl,
                path: error.config.url,
                method: error.config.method,
            };
        }
        // use cached Stack on error object to keep the call stack
        if (cachedStack !== undefined && error.stack !== undefined) {
            _this.stack = _this.name + ": " + _this.message + "\n" + cachedStack
                .split('\n')
                .slice(1)
                .join('\n');
        }
        return _this;
    }
    return class_1;
}(Error));

/*
 * Bundle: Meilisearch
 * Project: Meilisearch - Javascript API
 * Author: Quentin de Quelen <quentin@meilisearch.com>
 * Copyright: 2019, Meilisearch
 */
var MeiliAxiosWrapper = /** @class */ (function () {
    function MeiliAxiosWrapper(config) {
        if (config.apiKey !== undefined) {
            this.instance = instance.create({
                baseURL: config.host,
                headers: {
                    'X-Meili-API-Key': config.apiKey,
                },
            });
        }
        else {
            this.instance = instance.create({
                baseURL: config.host,
            });
        }
        this.cancelTokenSource = instance.CancelToken.source();
        this.instance.interceptors.response.use(function (response) { return response.data; });
        this.instance.interceptors.request.use(function (request) {
            if (request.data !== undefined) {
                return __assign(__assign({}, request), { data: JSON.stringify(request.data) });
            }
            return request;
        });
    }
    MeiliAxiosWrapper.prototype.get = function (url, config) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedStack, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedStack = new Error().stack;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.instance.get(url, config)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_1 = _a.sent();
                        throw new MeiliSearchApiError(e_1, cachedStack);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    MeiliAxiosWrapper.prototype.post = function (url, data, config) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedStack, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedStack = new Error().stack;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.instance.post(url, data, config)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_2 = _a.sent();
                        throw new MeiliSearchApiError(e_2, cachedStack);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    MeiliAxiosWrapper.prototype.put = function (url, data, config) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedStack, e_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedStack = new Error().stack;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.instance.put(url, data, config)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_3 = _a.sent();
                        throw new MeiliSearchApiError(e_3, cachedStack);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    MeiliAxiosWrapper.prototype.patch = function (url, data, config) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedStack, e_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedStack = new Error().stack;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.instance.patch(url, data, config)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_4 = _a.sent();
                        throw new MeiliSearchApiError(e_4, cachedStack);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    MeiliAxiosWrapper.prototype["delete"] = function (url, config) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedStack, e_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedStack = new Error().stack;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.instance["delete"](url, config)];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3:
                        e_5 = _a.sent();
                        throw new MeiliSearchApiError(e_5, cachedStack);
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return MeiliAxiosWrapper;
}());

function sleep(ms) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, ms); })];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}

/*
 * Bundle: Meilisearch / Indexes
 * Project: Meilisearch - Javascript API
 * Author: Quentin de Quelen <quentin@meilisearch.com>
 * Copyright: 2019, Meilisearch
 */
var Index = /** @class */ (function (_super) {
    __extends(Index, _super);
    function Index(config, uid) {
        var _this = _super.call(this, config) || this;
        _this.uid = uid;
        return _this;
    }
    ///
    /// UPDATES
    ///
    /**
     * Get the informations about an update status
     * @memberof Index
     * @method getUpdateStatus
     */
    Index.prototype.getUpdateStatus = function (updateId) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/updates/" + updateId;
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Index.prototype.waitForPendingUpdate = function (updateId, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.timeOutMs, timeOutMs = _c === void 0 ? 5000 : _c, _d = _b.intervalMs, intervalMs = _d === void 0 ? 50 : _d;
        return __awaiter(this, void 0, void 0, function () {
            var startingTime, response;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        startingTime = Date.now();
                        _e.label = 1;
                    case 1:
                        if (!(Date.now() - startingTime < timeOutMs)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.getUpdateStatus(updateId)];
                    case 2:
                        response = _e.sent();
                        if (response.status !== 'enqueued')
                            return [2 /*return*/, response];
                        return [4 /*yield*/, sleep(intervalMs)];
                    case 3:
                        _e.sent();
                        return [3 /*break*/, 1];
                    case 4: throw new MeiliSearchTimeOutError("timeout of " + timeOutMs + "ms has exceeded on process " + updateId + " when waiting for pending update to resolve.");
                }
            });
        });
    };
    /**
     * Get the list of all updates
     * @memberof Index
     * @method getAllUpdateStatus
     */
    Index.prototype.getAllUpdateStatus = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/updates";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// SEARCH
    ///
    /**
     * Search for documents into an index
     * @memberof Index
     * @method search
     */
    Index.prototype.search = function (query, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, params;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/search";
                        params = {
                            q: query,
                        };
                        if (options !== undefined) {
                            if (options.offset !== undefined) {
                                params.offset = options.offset;
                            }
                            if (options.limit !== undefined) {
                                params.limit = options.limit;
                            }
                            if (options.attributesToRetrieve !== undefined) {
                                if (Array.isArray(options.attributesToRetrieve)) {
                                    params.attributesToRetrieve = options.attributesToRetrieve.join(',');
                                }
                                else {
                                    params.attributesToRetrieve = options.attributesToRetrieve;
                                }
                            }
                            if (options.attributesToCrop !== undefined) {
                                if (Array.isArray(options.attributesToCrop)) {
                                    params.attributesToCrop = options.attributesToCrop.join(',');
                                }
                                else {
                                    params.attributesToCrop = options.attributesToCrop;
                                }
                            }
                            if (options.cropLength !== undefined) {
                                params.cropLength = options.cropLength;
                            }
                            if (options.attributesToHighlight !== undefined) {
                                if (Array.isArray(options.attributesToHighlight)) {
                                    params.attributesToHighlight = options.attributesToHighlight.join(',');
                                }
                                else {
                                    params.attributesToHighlight = options.attributesToHighlight;
                                }
                            }
                            if (options.filters !== undefined) {
                                params.filters = options.filters;
                            }
                            if (options.matches !== undefined) {
                                params.matches = options.matches;
                            }
                        }
                        return [4 /*yield*/, this.get(url, {
                                params: params,
                                cancelToken: this.cancelTokenSource.token,
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// INDEX
    ///
    /**
     * Show index information.
     * @memberof Index
     * @method show
     */
    Index.prototype.show = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid;
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update an index.
     * @memberof Index
     * @method updateIndex
     */
    Index.prototype.updateIndex = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid;
                        return [4 /*yield*/, this.put(url, data)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete an index.
     * @memberof Index
     * @method deleteIndex
     */
    Index.prototype.deleteIndex = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid;
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// STATS
    ///
    /**
     * get stats of an index
     * @memberof Index
     * @method getStats
     */
    Index.prototype.getStats = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/stats";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// DOCUMENTS
    ///
    /**
     * get documents of an index
     * @memberof Index
     * @method getDocuments
     */
    Index.prototype.getDocuments = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var url, attr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/documents";
                        if (options !== undefined && Array.isArray(options.attributesToRetrieve)) {
                            attr = options.attributesToRetrieve.join(',');
                        }
                        return [4 /*yield*/, this.get(url, {
                                params: __assign(__assign({}, options), (attr !== undefined ? { attributesToRetrieve: attr } : {})),
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get one document
     * @memberof Index
     * @method getDocument
     */
    Index.prototype.getDocument = function (documentId) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/documents/" + documentId;
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Add or replace multiples documents to an index
     * @memberof Index
     * @method addDocuments
     */
    Index.prototype.addDocuments = function (documents, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/documents";
                        return [4 /*yield*/, this.post(url, documents, {
                                params: options,
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Add or update multiples documents to an index
     * @memberof Index
     * @method updateDocuments
     */
    Index.prototype.updateDocuments = function (documents, options) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/documents";
                        return [4 /*yield*/, this.put(url, documents, {
                                params: options,
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete one document
     * @memberof Index
     * @method deleteDocument
     */
    Index.prototype.deleteDocument = function (documentId) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/documents/" + documentId;
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete multiples documents of an index
     * @memberof Index
     * @method deleteDocuments
     */
    Index.prototype.deleteDocuments = function (documentsIds) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/documents/delete-batch";
                        return [4 /*yield*/, this.post(url, documentsIds)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Delete all documents of an index
     * @memberof Index
     * @method deleteAllDocuments
     */
    Index.prototype.deleteAllDocuments = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/documents";
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// SETTINGS
    ///
    /**
     * Retrieve all settings
     * @memberof Index
     * @method getSettings
     */
    Index.prototype.getSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update all settings
     * Any parameters not provided will be left unchanged.
     * @memberof Index
     * @method updateSettings
     */
    Index.prototype.updateSettings = function (settings) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings";
                        return [4 /*yield*/, this.post(url, settings)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reset settings.
     * @memberof Index
     * @method resetSettings
     */
    Index.prototype.resetSettings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings";
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// SYNONYMS
    ///
    /**
     * Get the list of all synonyms
     * @memberof Index
     * @method getSynonyms
     */
    Index.prototype.getSynonyms = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/synonyms";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update the list of synonyms. Overwrite the old list.
     * @memberof Index
     * @method updateSynonyms
     */
    Index.prototype.updateSynonyms = function (synonyms) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/synonyms";
                        return [4 /*yield*/, this.post(url, synonyms)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reset the synonym list to be empty again
     * @memberof Index
     * @method resetSynonyms
     */
    Index.prototype.resetSynonyms = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/synonyms";
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// STOP WORDS
    ///
    /**
     * Get the list of all stop-words
     * @memberof Index
     * @method getStopWords
     */
    Index.prototype.getStopWords = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/stop-words";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update the list of stop-words. Overwrite the old list.
     * @memberof Index
     * @method updateStopWords
     */
    Index.prototype.updateStopWords = function (stopWords) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/stop-words";
                        return [4 /*yield*/, this.post(url, stopWords)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reset the stop-words list to be empty again
     * @memberof Index
     * @method resetStopWords
     */
    Index.prototype.resetStopWords = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/stop-words";
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// RANKING RULES
    ///
    /**
     * Get the list of all ranking-rules
     * @memberof Index
     * @method getRankingRules
     */
    Index.prototype.getRankingRules = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/ranking-rules";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update the list of ranking-rules. Overwrite the old list.
     * @memberof Index
     * @method updateRankingRules
     */
    Index.prototype.updateRankingRules = function (rankingRules) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/ranking-rules";
                        return [4 /*yield*/, this.post(url, rankingRules)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reset the ranking rules list to its default value
     * @memberof Index
     * @method resetRankingRules
     */
    Index.prototype.resetRankingRules = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/ranking-rules";
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// DISTINCT ATTRIBUTE
    ///
    /**
     * Get the distinct-attribute
     * @memberof Index
     * @method getDistinctAttribute
     */
    Index.prototype.getDistinctAttribute = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/distinct-attribute";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update the distinct-attribute.
     * @memberof Index
     * @method updateDistinctAttribute
     */
    Index.prototype.updateDistinctAttribute = function (distinctAttribute) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/distinct-attribute";
                        return [4 /*yield*/, this.post(url, distinctAttribute)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reset the distinct-attribute.
     * @memberof Index
     * @method resetDistinctAttribute
     */
    Index.prototype.resetDistinctAttribute = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/distinct-attribute";
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// SEARCHABLE ATTRIBUTE
    ///
    /**
     * Get the searchable-attributes
     * @memberof Index
     * @method getSearchableAttributes
     */
    Index.prototype.getSearchableAttributes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/searchable-attributes";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update the searchable-attributes.
     * @memberof Index
     * @method updateSearchableAttributes
     */
    Index.prototype.updateSearchableAttributes = function (searchableAttributes) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/searchable-attributes";
                        return [4 /*yield*/, this.post(url, searchableAttributes)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reset the searchable-attributes.
     * @memberof Index
     * @method resetSearchableAttributes
     */
    Index.prototype.resetSearchableAttributes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/searchable-attributes";
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// DISPLAYED ATTRIBUTE
    ///
    /**
     * Get the displayed-attributes
     * @memberof Index
     * @method getDisplayedAttributes
     */
    Index.prototype.getDisplayedAttributes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/displayed-attributes";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update the displayed-attributes.
     * @memberof Index
     * @method updateDisplayedAttributes
     */
    Index.prototype.updateDisplayedAttributes = function (displayedAttributes) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/displayed-attributes";
                        return [4 /*yield*/, this.post(url, displayedAttributes)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Reset the displayed-attributes.
     * @memberof Index
     * @method resetDisplayedAttributes
     */
    Index.prototype.resetDisplayedAttributes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/displayed-attributes";
                        return [4 /*yield*/, this["delete"](url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// ACCEPT NEW FIELDS
    ///
    /**
     * Get the accept-new-fields value.
     * @memberof Index
     * @method getAcceptNewFields
     */
    Index.prototype.getAcceptNewFields = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/accept-new-fields";
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Update the accept-new-fields value.
     * @memberof Index
     * @method updateAcceptNewFields
     */
    Index.prototype.updateAcceptNewFields = function (acceptNewFields) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = "/indexes/" + this.uid + "/settings/accept-new-fields";
                        return [4 /*yield*/, this.post(url, acceptNewFields)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return Index;
}(MeiliAxiosWrapper));

/*
 * Bundle: Meilisearch
 * Project: Meilisearch - Javascript API
 * Author: Quentin de Quelen <quentin@meilisearch.com>
 * Copyright: 2019, Meilisearch
 */
var Meilisearch = /** @class */ (function (_super) {
    __extends(Meilisearch, _super);
    function Meilisearch(config) {
        var _this = _super.call(this, config) || this;
        _this.config = config;
        return _this;
    }
    /**
     * Return an Index instance
     * @memberof Meilisearch
     * @method Index
     */
    Meilisearch.prototype.getIndex = function (indexUid) {
        return new Index(this.config, indexUid);
    };
    /**
     * List all indexes in the database
     * @memberof Meilisearch
     * @method listIndexes
     */
    Meilisearch.prototype.listIndexes = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/indexes';
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Create a new index
     * @memberof Meilisearch
     * @method createIndex
     */
    Meilisearch.prototype.createIndex = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var url, index;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/indexes';
                        return [4 /*yield*/, this.post(url, data)];
                    case 1:
                        index = _a.sent();
                        return [2 /*return*/, new Index(this.config, index.uid)];
                }
            });
        });
    };
    ///
    /// KEYS
    ///
    /**
     * Get private and public key
     * @memberof Meilisearch
     * @method getKey
     */
    Meilisearch.prototype.getKeys = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/keys';
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// HEALTH
    ///
    /**
     * Check if the server is healhty
     * @memberof Meilisearch
     * @method isHealthy
     */
    Meilisearch.prototype.isHealthy = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/health';
                        return [4 /*yield*/, this.get(url).then(function (_) { return true; })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Change the healthyness to healthy
     * @memberof Meilisearch
     * @method setHealthy
     */
    Meilisearch.prototype.setHealthy = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/health';
                        return [4 /*yield*/, this.put(url, {
                                health: true,
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Change the healthyness to unhealthy
     * @memberof Meilisearch
     * @method setUnhealthy
     */
    Meilisearch.prototype.setUnhealthy = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/health';
                        return [4 /*yield*/, this.put(url, {
                                health: false,
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Change the healthyness to unhealthy
     * @memberof Meilisearch
     * @method setUnhealthy
     */
    Meilisearch.prototype.changeHealthTo = function (health) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/health';
                        return [4 /*yield*/, this.put(url, {
                                health: health,
                            })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ///
    /// STATS
    ///
    /**
     * Get the stats of all the database
     * @memberof Meilisearch
     * @method stats
     */
    Meilisearch.prototype.stats = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/stats';
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get the version of MeiliSearch
     * @memberof Meilisearch
     * @method version
     */
    Meilisearch.prototype.version = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/version';
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get the server consuption, RAM / CPU / Network
     * @memberof Meilisearch
     * @method sysInfo
     */
    Meilisearch.prototype.sysInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/sys-info';
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Get the server consuption, RAM / CPU / Network. All information as human readable
     * @memberof Meilisearch
     * @method prettySysInfo
     */
    Meilisearch.prototype.prettySysInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = '/sys-info/pretty';
                        return [4 /*yield*/, this.get(url)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return Meilisearch;
}(MeiliAxiosWrapper));

module.exports = Meilisearch;
