import MeiliAxiosWrapper from './meili-axios-wrapper';
import * as Types from './types';
declare class Index extends MeiliAxiosWrapper implements Types.IndexInterface {
    uid: string;
    constructor(config: Types.Config, uid: string);
    /**
     * Get the informations about an update status
     * @memberof Index
     * @method getUpdateStatus
     */
    getUpdateStatus(updateId: number): Promise<Types.Update>;
    waitForPendingUpdate(updateId: number, { timeOutMs, intervalMs, }?: {
        timeOutMs?: number;
        intervalMs?: number;
    }): Promise<Types.Update>;
    /**
     * Get the list of all updates
     * @memberof Index
     * @method getAllUpdateStatus
     */
    getAllUpdateStatus(): Promise<Types.Update[]>;
    /**
     * Search for documents into an index
     * @memberof Index
     * @method search
     */
    search(query: string, options?: Types.SearchParams): Promise<Types.SearchResponse>;
    /**
     * Show index information.
     * @memberof Index
     * @method show
     */
    show(): Promise<Types.IndexResponse>;
    /**
     * Update an index.
     * @memberof Index
     * @method updateIndex
     */
    updateIndex(data: Types.UpdateIndexRequest): Promise<Types.IndexResponse>;
    /**
     * Delete an index.
     * @memberof Index
     * @method deleteIndex
     */
    deleteIndex(): Promise<string>;
    /**
     * get stats of an index
     * @memberof Index
     * @method getStats
     */
    getStats(): Promise<Types.IndexStats>;
    /**
     * get documents of an index
     * @memberof Index
     * @method getDocuments
     */
    getDocuments(options?: Types.GetDocumentsParams): Promise<Types.Document[]>;
    /**
     * Get one document
     * @memberof Index
     * @method getDocument
     */
    getDocument(documentId: string | number): Promise<Types.Document>;
    /**
     * Add or replace multiples documents to an index
     * @memberof Index
     * @method addDocuments
     */
    addDocuments(documents: Types.Document[], options?: Types.AddDocumentParams): Promise<Types.EnqueuedUpdate>;
    /**
     * Add or update multiples documents to an index
     * @memberof Index
     * @method updateDocuments
     */
    updateDocuments(documents: Types.Document[], options?: Types.AddDocumentParams): Promise<Types.EnqueuedUpdate>;
    /**
     * Delete one document
     * @memberof Index
     * @method deleteDocument
     */
    deleteDocument(documentId: string | number): Promise<Types.EnqueuedUpdate>;
    /**
     * Delete multiples documents of an index
     * @memberof Index
     * @method deleteDocuments
     */
    deleteDocuments(documentsIds: string[] | number[]): Promise<Types.EnqueuedUpdate>;
    /**
     * Delete all documents of an index
     * @memberof Index
     * @method deleteAllDocuments
     */
    deleteAllDocuments(): Promise<Types.EnqueuedUpdate>;
    /**
     * Retrieve all settings
     * @memberof Index
     * @method getSettings
     */
    getSettings(): Promise<Types.Settings>;
    /**
     * Update all settings
     * Any parameters not provided will be left unchanged.
     * @memberof Index
     * @method updateSettings
     */
    updateSettings(settings: Types.Settings): Promise<Types.EnqueuedUpdate>;
    /**
     * Reset settings.
     * @memberof Index
     * @method resetSettings
     */
    resetSettings(): Promise<Types.EnqueuedUpdate>;
    /**
     * Get the list of all synonyms
     * @memberof Index
     * @method getSynonyms
     */
    getSynonyms(): Promise<object>;
    /**
     * Update the list of synonyms. Overwrite the old list.
     * @memberof Index
     * @method updateSynonyms
     */
    updateSynonyms(synonyms: object): Promise<Types.EnqueuedUpdate>;
    /**
     * Reset the synonym list to be empty again
     * @memberof Index
     * @method resetSynonyms
     */
    resetSynonyms(): Promise<Types.EnqueuedUpdate>;
    /**
     * Get the list of all stop-words
     * @memberof Index
     * @method getStopWords
     */
    getStopWords(): Promise<string[]>;
    /**
     * Update the list of stop-words. Overwrite the old list.
     * @memberof Index
     * @method updateStopWords
     */
    updateStopWords(stopWords: string[]): Promise<Types.EnqueuedUpdate>;
    /**
     * Reset the stop-words list to be empty again
     * @memberof Index
     * @method resetStopWords
     */
    resetStopWords(): Promise<Types.EnqueuedUpdate>;
    /**
     * Get the list of all ranking-rules
     * @memberof Index
     * @method getRankingRules
     */
    getRankingRules(): Promise<string[]>;
    /**
     * Update the list of ranking-rules. Overwrite the old list.
     * @memberof Index
     * @method updateRankingRules
     */
    updateRankingRules(rankingRules: string[]): Promise<Types.EnqueuedUpdate>;
    /**
     * Reset the ranking rules list to its default value
     * @memberof Index
     * @method resetRankingRules
     */
    resetRankingRules(): Promise<Types.EnqueuedUpdate>;
    /**
     * Get the distinct-attribute
     * @memberof Index
     * @method getDistinctAttribute
     */
    getDistinctAttribute(): Promise<string | void>;
    /**
     * Update the distinct-attribute.
     * @memberof Index
     * @method updateDistinctAttribute
     */
    updateDistinctAttribute(distinctAttribute: string): Promise<Types.EnqueuedUpdate>;
    /**
     * Reset the distinct-attribute.
     * @memberof Index
     * @method resetDistinctAttribute
     */
    resetDistinctAttribute(): Promise<Types.EnqueuedUpdate>;
    /**
     * Get the searchable-attributes
     * @memberof Index
     * @method getSearchableAttributes
     */
    getSearchableAttributes(): Promise<string[]>;
    /**
     * Update the searchable-attributes.
     * @memberof Index
     * @method updateSearchableAttributes
     */
    updateSearchableAttributes(searchableAttributes: string[]): Promise<Types.EnqueuedUpdate>;
    /**
     * Reset the searchable-attributes.
     * @memberof Index
     * @method resetSearchableAttributes
     */
    resetSearchableAttributes(): Promise<Types.EnqueuedUpdate>;
    /**
     * Get the displayed-attributes
     * @memberof Index
     * @method getDisplayedAttributes
     */
    getDisplayedAttributes(): Promise<string[]>;
    /**
     * Update the displayed-attributes.
     * @memberof Index
     * @method updateDisplayedAttributes
     */
    updateDisplayedAttributes(displayedAttributes: string[]): Promise<Types.EnqueuedUpdate>;
    /**
     * Reset the displayed-attributes.
     * @memberof Index
     * @method resetDisplayedAttributes
     */
    resetDisplayedAttributes(): Promise<Types.EnqueuedUpdate>;
    /**
     * Get the accept-new-fields value.
     * @memberof Index
     * @method getAcceptNewFields
     */
    getAcceptNewFields(): Promise<boolean>;
    /**
     * Update the accept-new-fields value.
     * @memberof Index
     * @method updateAcceptNewFields
     */
    updateAcceptNewFields(acceptNewFields: boolean): Promise<Types.EnqueuedUpdate>;
}
export { Index };
//# sourceMappingURL=index.d.ts.map