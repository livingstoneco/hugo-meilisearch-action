import { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelTokenSource } from 'axios';
import * as Types from './types';
declare class MeiliAxiosWrapper implements Types.MeiliAxiosWrapperInterface {
    instance: AxiosInstance;
    cancelTokenSource: CancelTokenSource;
    constructor(config: Types.Config);
    get<T = any, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R>;
    post(url: string, data: Types.IndexRequest, config?: AxiosRequestConfig): Promise<Types.IndexResponse>;
    post<T = any, R = AxiosResponse<Types.EnqueuedUpdate>>(url: string, data?: T, config?: AxiosRequestConfig): Promise<R>;
    put<T = any, R = AxiosResponse<T>>(url: string, data?: any, config?: AxiosRequestConfig): Promise<R>;
    patch<T = any, R = AxiosResponse<T>>(url: string, data?: any, config?: AxiosRequestConfig): Promise<R>;
    delete<T = any, R = AxiosResponse<T>>(url: string, config?: AxiosRequestConfig): Promise<R>;
}
export default MeiliAxiosWrapper;
//# sourceMappingURL=meili-axios-wrapper.d.ts.map